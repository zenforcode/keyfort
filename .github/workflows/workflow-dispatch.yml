name: Workflow Dispatch with Version
on:
  workflow_dispatch:
    inputs:
      version:
        description: Version number (e.g., 1.0.0)
        required: true
        default: 1.0.0
jobs:
  validate-team:
    runs-on: ubuntu-latest
    steps:
      - name: Check Team Membership
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ORG="zenforcode"                          # Replace with your GitHub organization name
          TEAM_SLUG="data-vault-team"               # Replace with your team slug
          ACTOR="${{ github.actor }}"               # User who triggered the workflow
          echo "Validating if $ACTOR belongs to team $TEAM_SLUG in organization $ORG."
          # Fetch the members of the team
          TEAM_MEMBERS_URL="https://api.github.com/orgs/$ORG/teams/$TEAM_SLUG/members"
          RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" $TEAM_MEMBERS_URL)

          # Check if the actor is part of the team
          echo $RESPONSE | grep -q "\"login\": \"$ACTOR\""
          if [ $? -ne 0 ]; then
            echo "User $ACTOR is not a member of the team $TEAM_SLUG. Exiting."
            exit 1
          fi
          echo "User $ACTOR is a valid team member. Proceeding."
  versioning:
    needs: validate-team
    permissions:
      contents: write  
      actions: read 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Validate version
        run: >
          echo "Validating version: ${{ github.event.inputs.version }}"

          if [[ ! "${{ github.event.inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. Expected format: X.Y.Z (e.g., 1.0.0)"
            exit 1
          fi
      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - name: Create and Push Git Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ github.event.inputs.version }}
          echo "Tagging version: $VERSION"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"
          
