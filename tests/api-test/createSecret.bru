meta {
  name: createSecret
  type: http
  seq: 1
}

post {
  url: {{BASE_URL}}/secret
  body: json
  auth: none
}

body:json {
  {
    "secret": "this is my secret"
  }
}

body:text {
  "Super secret value"
}

assert {
  res.status: eq 200
  res.body.version: isDefined res.body
  res.body.metadata: isDefined
  res.body.value: eq {{secret}}
  res.body.secret_id: matches /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/
  res.body.metadata.is_active: eq true
}

script:pre-request {
  bru.setVar("secret", req.body.secret);
}

script:post-response {
  bru.setEnvVar("id", res.body.secret_id);
}

tests {
  // test("createSecret should handle a valid request", () => {
  //     expect(res.getStatus()).to.equal(200);
  //   });
    
    
  //   test("createSecret should return expected keys", () => {
  //     const data = res.getBody();
  //     bru.setEnvVar("id", data.id);
      
  //     expect(data).to.have.property("metadata");
  //     const metadata = data.metadata;
      
  //     expect(data).to.have.property("version");
  //     const version = data.version;
      
  //     expect(data).to.have.property("secret_id");
  //     expect(data).to.have.property("value").equal(req.body.secret);
  //     expect(metadata).to.have.property("is_active").equal(true);
  //     expect(metadata).to.have.property("created_at");
  //     expect(metadata).to.have.property("updated_at");
  //   });
    
    
  //   test("createSecret should return expected values", () => {
  //     const data = res.getBody();
  //     const metadata = data.metadata;
      
  //     expect(data).to.have.property("value").equal(req.body.secret);
  //     expect(metadata).to.have.property("is_active").equal(true);
  //     expect(metadata).to.have.property("updated_at").equal(null);
  //   });
}
